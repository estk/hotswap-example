// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod hotswap {
    #[allow(dead_code)]
    pub mod salutation {
        #[allow(dead_code, clippy::all)]
        pub mod user_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Tag = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Gender {
                Male,
                Female,
                Other,
            }
            impl ::core::fmt::Debug for Gender {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Gender::Male => f.debug_tuple("Gender::Male").finish(),
                        Gender::Female => f.debug_tuple("Gender::Female").finish(),
                        Gender::Other => f.debug_tuple("Gender::Other").finish(),
                    }
                }
            }

            impl Gender {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Gender {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Gender::Male,
                        1 => Gender::Female,
                        2 => Gender::Other,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct User {
                pub name: _rt::String,
                pub id: u64,
                pub tenant_tags: _rt::Vec<Tag>,
                pub gender: Gender,
            }
            impl ::core::fmt::Debug for User {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("User")
                        .field("name", &self.name)
                        .field("id", &self.id)
                        .field("tenant-tags", &self.tenant_tags)
                        .field("gender", &self.gender)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub seconds: u64,
                pub nanos: u64,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("seconds", &self.seconds)
                        .field("nanos", &self.nanos)
                        .finish()
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod user {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type User = super::super::super::hotswap::salutation::user_types::User;
            pub type Time = super::super::super::hotswap::salutation::user_types::Time;
            #[allow(unused_unsafe, clippy::all)]
            pub fn age_in_weeks(u: &User, now: Time) -> u32 {
                unsafe {
                    let super::super::super::hotswap::salutation::user_types::User {
                        name: name0,
                        id: id0,
                        tenant_tags: tenant_tags0,
                        gender: gender0,
                    } = u;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = tenant_tags0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let super::super::super::hotswap::salutation::user_types::Time {
                        seconds: seconds3,
                        nanos: nanos3,
                    } = now;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hotswap:salutation/user@0.1.0")]
                    extern "C" {
                        #[link_name = "age-in-weeks"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: i64,
                        ) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: i64,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        ptr1.cast_mut(),
                        len1,
                        _rt::as_i64(id0),
                        ptr2.cast_mut(),
                        len2,
                        gender0.clone() as i32,
                        _rt::as_i64(seconds3),
                        _rt::as_i64(nanos3),
                    );
                    ret as u32
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod hotswap {
        #[allow(dead_code)]
        pub mod salutation {
            #[allow(dead_code, clippy::all)]
            pub mod salutation_types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum FormalHonorific {
                    Sir,
                    Maam,
                    SirMaam,
                    Custom(_rt::String),
                }
                impl ::core::fmt::Debug for FormalHonorific {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            FormalHonorific::Sir => f.debug_tuple("FormalHonorific::Sir").finish(),
                            FormalHonorific::Maam => {
                                f.debug_tuple("FormalHonorific::Maam").finish()
                            }
                            FormalHonorific::SirMaam => {
                                f.debug_tuple("FormalHonorific::SirMaam").finish()
                            }
                            FormalHonorific::Custom(e) => {
                                f.debug_tuple("FormalHonorific::Custom").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_hotswap_salutation_salutation_types_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_hotswap_salutation_salutation_types_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod salutation {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type User = super::super::super::super::hotswap::salutation::user_types::User;
                pub type FormalHonorific = super::super::super::super::exports::hotswap::salutation::salutation_types::FormalHonorific;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_formal_honorific_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i64,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::get_formal_honorific(super::super::super::super::hotswap::salutation::user_types::User{
          name: _rt::string_lift(bytes0),
          id: arg2 as u64,
          tenant_tags: _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
          gender: super::super::super::super::hotswap::salutation::user_types::Gender::_lift(arg5 as u8),
        });
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    use super::super::super::super::exports::hotswap::salutation::salutation_types::FormalHonorific as V5;
                    match result2 {
                        V5::Sir => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        V5::Maam => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                        }
                        V5::SirMaam => {
                            *ptr3.add(0).cast::<u8>() = (2i32) as u8;
                        }
                        V5::Custom(e) => {
                            *ptr3.add(0).cast::<u8>() = (3i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_formal_honorific<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        1 => (),
                        2 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_greet_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i64,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::greet(super::super::super::super::hotswap::salutation::user_types::User{
        name: _rt::string_lift(bytes0),
        id: arg2 as u64,
        tenant_tags: _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
        gender: super::super::super::super::hotswap::salutation::user_types::Gender::_lift(arg5 as u8),
      });
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec4 = (result2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr3.add(4).cast::<usize>() = len4;
                    *ptr3.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_greet<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn get_formal_honorific(u: User) -> FormalHonorific;
                    fn greet(u: User) -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_hotswap_salutation_salutation_0_1_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "hotswap:salutation/salutation@0.1.0#get-formal-honorific"]
        unsafe extern "C" fn export_get_formal_honorific(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 {
          $($path_to_types)*::_export_get_formal_honorific_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
        }
        #[export_name = "cabi_post_hotswap:salutation/salutation@0.1.0#get-formal-honorific"]
        unsafe extern "C" fn _post_return_get_formal_honorific(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_get_formal_honorific::<$ty>(arg0)
        }
        #[export_name = "hotswap:salutation/salutation@0.1.0#greet"]
        unsafe extern "C" fn export_greet(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 {
          $($path_to_types)*::_export_greet_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
        }
        #[export_name = "cabi_post_hotswap:salutation/salutation@0.1.0#greet"]
        unsafe extern "C" fn _post_return_greet(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_greet::<$ty>(arg0)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_hotswap_salutation_salutation_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_app_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::hotswap::salutation::salutation_types::__export_hotswap_salutation_salutation_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::hotswap::salutation::salutation_types);
  $($path_to_types_root)*::exports::hotswap::salutation::salutation::__export_hotswap_salutation_salutation_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::hotswap::salutation::salutation);
  )
}
#[doc(inline)]
pub(crate) use __export_app_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:app:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 719] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd5\x04\x01A\x02\x01\
A\x0b\x01B\x09\x01w\x04\0\x03tag\x03\0\0\x01m\x03\x04male\x06female\x05other\x04\
\0\x06gender\x03\0\x02\x01p\x01\x01r\x04\x04names\x02idw\x0btenant-tags\x04\x06g\
ender\x03\x04\0\x04user\x03\0\x05\x01r\x02\x07secondsw\x05nanosw\x04\0\x04time\x03\
\0\x07\x03\x01#hotswap:salutation/user-types@0.1.0\x05\0\x02\x03\0\0\x04user\x02\
\x03\0\0\x04time\x01B\x06\x02\x03\x02\x01\x01\x04\0\x04user\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x04time\x03\0\x02\x01@\x02\x01u\x01\x03now\x03\0y\x04\0\x0cage-in-wee\
ks\x01\x04\x03\x01\x1dhotswap:salutation/user@0.1.0\x05\x03\x01B\x02\x01q\x04\x03\
sir\0\0\x04maam\0\0\x08sir-maam\0\0\x06custom\x01s\0\x04\0\x10formal-honorific\x03\
\0\0\x04\x01)hotswap:salutation/salutation-types@0.1.0\x05\x04\x02\x03\0\x02\x10\
formal-honorific\x01B\x0a\x02\x03\x02\x01\x01\x04\0\x04user\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x04time\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x10formal-honorific\x03\0\
\x04\x01@\x01\x01u\x01\0\x05\x04\0\x14get-formal-honorific\x01\x06\x01@\x01\x01u\
\x01\0s\x04\0\x05greet\x01\x07\x04\x01#hotswap:salutation/salutation@0.1.0\x05\x06\
\x04\x01\x1chotswap:salutation/app@0.1.0\x04\0\x0b\x09\x01\0\x03app\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rus\
t\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
