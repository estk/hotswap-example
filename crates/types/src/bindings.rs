// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod hotswap {
        #[allow(dead_code)]
        pub mod salutation {
            #[allow(dead_code, clippy::all)]
            pub mod user_interface {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Tag = u64;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Gender {
                    Male,
                    Female,
                    Other,
                }
                impl ::core::fmt::Debug for Gender {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Gender::Male => f.debug_tuple("Gender::Male").finish(),
                            Gender::Female => f.debug_tuple("Gender::Female").finish(),
                            Gender::Other => f.debug_tuple("Gender::Other").finish(),
                        }
                    }
                }

                impl Gender {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Gender {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Gender::Male,
                            1 => Gender::Female,
                            2 => Gender::Other,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct User {
                    pub name: _rt::String,
                    pub id: u64,
                    pub tenant_tags: _rt::Vec<Tag>,
                    pub gender: Gender,
                }
                impl ::core::fmt::Debug for User {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("User")
                            .field("name", &self.name)
                            .field("id", &self.id)
                            .field("tenant-tags", &self.tenant_tags)
                            .field("gender", &self.gender)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Time {
                    pub seconds: u64,
                    pub nanos: u64,
                }
                impl ::core::fmt::Debug for Time {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Time")
                            .field("seconds", &self.seconds)
                            .field("nanos", &self.nanos)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_age_in_weeks_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i64,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i64,
                    arg7: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::age_in_weeks(
                        User {
                            name: _rt::string_lift(bytes0),
                            id: arg2 as u64,
                            tenant_tags: _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                            gender: Gender::_lift(arg5 as u8),
                        },
                        Time {
                            seconds: arg6 as u64,
                            nanos: arg7 as u64,
                        },
                    );
                    _rt::as_i32(result2)
                }
                pub trait Guest {
                    fn age_in_weeks(u: User, now: Time) -> u32;
                }
                #[doc(hidden)]

                macro_rules! __export_hotswap_salutation_user_interface_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "hotswap:salutation/user-interface@0.1.0#age-in-weeks"]
          unsafe extern "C" fn export_age_in_weeks(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,arg6: i64,arg7: i64,) -> i32 {
            $($path_to_types)*::_export_age_in_weeks_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_hotswap_salutation_user_interface_0_1_0_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_types_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::hotswap::salutation::user_interface::__export_hotswap_salutation_user_interface_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::hotswap::salutation::user_interface);
  )
}
#[doc(inline)]
pub(crate) use __export_types_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:types:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 362] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xee\x01\x01A\x02\x01\
A\x02\x01B\x0b\x01w\x04\0\x03tag\x03\0\0\x01m\x03\x04male\x06female\x05other\x04\
\0\x06gender\x03\0\x02\x01p\x01\x01r\x04\x04names\x02idw\x0btenant-tags\x04\x06g\
ender\x03\x04\0\x04user\x03\0\x05\x01r\x02\x07secondsw\x05nanosw\x04\0\x04time\x03\
\0\x07\x01@\x02\x01u\x06\x03now\x08\0y\x04\0\x0cage-in-weeks\x01\x09\x04\x01'hot\
swap:salutation/user-interface@0.1.0\x05\0\x04\x01\x1ehotswap:salutation/types@0\
.1.0\x04\0\x0b\x0b\x01\0\x05types\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
